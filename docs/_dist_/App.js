import './App.css.proxy.js';
/* src/App.svelte generated by Svelte v3.30.0 */
import {
	SvelteComponent,
	append,
	attr,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert,
	mount_component,
	noop,
	safe_not_equal,
	space,
	transition_in,
	transition_out
} from "../web_modules/svelte/internal.js";

import { Route } from "../web_modules/tinro.js";
import "./normalize.css.proxy.js";
import "./prettify.css.proxy.js";
import "./style.css.proxy.js";
import DatePicker from "./components/DatePicker.js";
import dayjs from "../web_modules/dayjs/esm.js";

function create_default_slot_16(ctx) {
	let h1;
	let t1;
	let nav;

	return {
		c() {
			h1 = element("h1");
			h1.textContent = "Svelte Date Range Picker";
			t1 = space();
			nav = element("nav");

			nav.innerHTML = `<a href="/range-picker/with-time" class="svelte-l439vz">With Time</a> 
              <a href="/range-picker/without-time" class="svelte-l439vz">Without Time</a>`;

			attr(nav, "class", "svelte-l439vz");
		},
		m(target, anchor) {
			insert(target, h1, anchor);
			insert(target, t1, anchor);
			insert(target, nav, anchor);
		},
		d(detaching) {
			if (detaching) detach(h1);
			if (detaching) detach(t1);
			if (detaching) detach(nav);
		}
	};
}

// (69:12) <Route path="/*">
function create_default_slot_15(ctx) {
	let nav;
	let t5;
	let h1;

	return {
		c() {
			nav = element("nav");

			nav.innerHTML = `<a href="/date-picker/with-time" class="svelte-l439vz">With Time</a> 
                <a href="/date-picker/without-time" class="svelte-l439vz">Without Time</a> 
                <a href="/date-picker/with-time/with-selected-date" class="svelte-l439vz">With Selected Date</a>`;

			t5 = space();
			h1 = element("h1");
			h1.textContent = "Svelte Date Picker";
			attr(nav, "class", "svelte-l439vz");
		},
		m(target, anchor) {
			insert(target, nav, anchor);
			insert(target, t5, anchor);
			insert(target, h1, anchor);
		},
		d(detaching) {
			if (detaching) detach(nav);
			if (detaching) detach(t5);
			if (detaching) detach(h1);
		}
	};
}

// (79:14) <Route path="/">
function create_default_slot_14(ctx) {
	let datepicker;
	let current;
	datepicker = new DatePicker({ props: { format: "ddd, DD MMM YYYY" } });

	return {
		c() {
			create_component(datepicker.$$.fragment);
		},
		m(target, anchor) {
			mount_component(datepicker, target, anchor);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(datepicker.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(datepicker.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(datepicker, detaching);
		}
	};
}

// (77:12) <Route path="/without-time/*">
function create_default_slot_13(ctx) {
	let h2;
	let t1;
	let route;
	let current;

	route = new Route({
			props: {
				path: "/",
				$$slots: { default: [create_default_slot_14] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			h2 = element("h2");
			h2.textContent = "Without Time Choice";
			t1 = space();
			create_component(route.$$.fragment);
		},
		m(target, anchor) {
			insert(target, h2, anchor);
			insert(target, t1, anchor);
			mount_component(route, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const route_changes = {};

			if (dirty & /*$$scope*/ 1) {
				route_changes.$$scope = { dirty, ctx };
			}

			route.$set(route_changes);
		},
		i(local) {
			if (current) return;
			transition_in(route.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(route.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(h2);
			if (detaching) detach(t1);
			destroy_component(route, detaching);
		}
	};
}

// (84:14) <Route path="/*">
function create_default_slot_12(ctx) {
	let h2;

	return {
		c() {
			h2 = element("h2");
			h2.textContent = "With Time Choice";
		},
		m(target, anchor) {
			insert(target, h2, anchor);
		},
		d(detaching) {
			if (detaching) detach(h2);
		}
	};
}

// (87:14) <Route path="/">
function create_default_slot_11(ctx) {
	let datepicker;
	let current;

	datepicker = new DatePicker({
			props: {
				format: "ddd, DD MMM YYYY HH:mm",
				time: true
			}
		});

	return {
		c() {
			create_component(datepicker.$$.fragment);
		},
		m(target, anchor) {
			mount_component(datepicker, target, anchor);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(datepicker.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(datepicker.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(datepicker, detaching);
		}
	};
}

// (90:14) <Route path="/with-selected-date">
function create_default_slot_10(ctx) {
	let h3;
	let t1;
	let datepicker;
	let current;

	datepicker = new DatePicker({
			props: {
				format: "ddd, DD MMM YYYY HH:mm",
				selected: dayjs("2020-04-20T16:15:33.000Z").toDate(),
				time: true
			}
		});

	return {
		c() {
			h3 = element("h3");
			h3.textContent = "With Selected Date";
			t1 = space();
			create_component(datepicker.$$.fragment);
		},
		m(target, anchor) {
			insert(target, h3, anchor);
			insert(target, t1, anchor);
			mount_component(datepicker, target, anchor);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(datepicker.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(datepicker.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(h3);
			if (detaching) detach(t1);
			destroy_component(datepicker, detaching);
		}
	};
}

// (83:12) <Route path="/with-time/*">
function create_default_slot_9(ctx) {
	let route0;
	let t0;
	let route1;
	let t1;
	let route2;
	let current;

	route0 = new Route({
			props: {
				path: "/*",
				$$slots: { default: [create_default_slot_12] },
				$$scope: { ctx }
			}
		});

	route1 = new Route({
			props: {
				path: "/",
				$$slots: { default: [create_default_slot_11] },
				$$scope: { ctx }
			}
		});

	route2 = new Route({
			props: {
				path: "/with-selected-date",
				$$slots: { default: [create_default_slot_10] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(route0.$$.fragment);
			t0 = space();
			create_component(route1.$$.fragment);
			t1 = space();
			create_component(route2.$$.fragment);
		},
		m(target, anchor) {
			mount_component(route0, target, anchor);
			insert(target, t0, anchor);
			mount_component(route1, target, anchor);
			insert(target, t1, anchor);
			mount_component(route2, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const route0_changes = {};

			if (dirty & /*$$scope*/ 1) {
				route0_changes.$$scope = { dirty, ctx };
			}

			route0.$set(route0_changes);
			const route1_changes = {};

			if (dirty & /*$$scope*/ 1) {
				route1_changes.$$scope = { dirty, ctx };
			}

			route1.$set(route1_changes);
			const route2_changes = {};

			if (dirty & /*$$scope*/ 1) {
				route2_changes.$$scope = { dirty, ctx };
			}

			route2.$set(route2_changes);
		},
		i(local) {
			if (current) return;
			transition_in(route0.$$.fragment, local);
			transition_in(route1.$$.fragment, local);
			transition_in(route2.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(route0.$$.fragment, local);
			transition_out(route1.$$.fragment, local);
			transition_out(route2.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(route0, detaching);
			if (detaching) detach(t0);
			destroy_component(route1, detaching);
			if (detaching) detach(t1);
			destroy_component(route2, detaching);
		}
	};
}

// (68:10) <Route path="/date-picker/*">
function create_default_slot_8(ctx) {
	let route0;
	let t0;
	let route1;
	let t1;
	let route2;
	let current;

	route0 = new Route({
			props: {
				path: "/*",
				$$slots: { default: [create_default_slot_15] },
				$$scope: { ctx }
			}
		});

	route1 = new Route({
			props: {
				path: "/without-time/*",
				$$slots: { default: [create_default_slot_13] },
				$$scope: { ctx }
			}
		});

	route2 = new Route({
			props: {
				path: "/with-time/*",
				$$slots: { default: [create_default_slot_9] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(route0.$$.fragment);
			t0 = space();
			create_component(route1.$$.fragment);
			t1 = space();
			create_component(route2.$$.fragment);
		},
		m(target, anchor) {
			mount_component(route0, target, anchor);
			insert(target, t0, anchor);
			mount_component(route1, target, anchor);
			insert(target, t1, anchor);
			mount_component(route2, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const route0_changes = {};

			if (dirty & /*$$scope*/ 1) {
				route0_changes.$$scope = { dirty, ctx };
			}

			route0.$set(route0_changes);
			const route1_changes = {};

			if (dirty & /*$$scope*/ 1) {
				route1_changes.$$scope = { dirty, ctx };
			}

			route1.$set(route1_changes);
			const route2_changes = {};

			if (dirty & /*$$scope*/ 1) {
				route2_changes.$$scope = { dirty, ctx };
			}

			route2.$set(route2_changes);
		},
		i(local) {
			if (current) return;
			transition_in(route0.$$.fragment, local);
			transition_in(route1.$$.fragment, local);
			transition_in(route2.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(route0.$$.fragment, local);
			transition_out(route1.$$.fragment, local);
			transition_out(route2.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(route0, detaching);
			if (detaching) detach(t0);
			destroy_component(route1, detaching);
			if (detaching) detach(t1);
			destroy_component(route2, detaching);
		}
	};
}

// (100:12) <Route path="/*">
function create_default_slot_7(ctx) {
	let nav;
	let t5;
	let h1;

	return {
		c() {
			nav = element("nav");

			nav.innerHTML = `<a href="/range-picker/with-time" class="svelte-l439vz">With Time</a> 
                <a href="/range-picker/without-time" class="svelte-l439vz">Without Time</a> 
                <a href="/range-picker/with-time/with-selected-dates" class="svelte-l439vz">With Selected Dates</a>`;

			t5 = space();
			h1 = element("h1");
			h1.textContent = "Svelte Range Picker";
			attr(nav, "class", "svelte-l439vz");
		},
		m(target, anchor) {
			insert(target, nav, anchor);
			insert(target, t5, anchor);
			insert(target, h1, anchor);
		},
		d(detaching) {
			if (detaching) detach(nav);
			if (detaching) detach(t5);
			if (detaching) detach(h1);
		}
	};
}

// (110:14) <Route path="/">
function create_default_slot_6(ctx) {
	let datepicker;
	let current;

	datepicker = new DatePicker({
			props: { format: "ddd, DD MMM YYYY", range: true }
		});

	return {
		c() {
			create_component(datepicker.$$.fragment);
		},
		m(target, anchor) {
			mount_component(datepicker, target, anchor);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(datepicker.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(datepicker.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(datepicker, detaching);
		}
	};
}

// (108:12) <Route path="/without-time/*">
function create_default_slot_5(ctx) {
	let h2;
	let t1;
	let route;
	let current;

	route = new Route({
			props: {
				path: "/",
				$$slots: { default: [create_default_slot_6] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			h2 = element("h2");
			h2.textContent = "Without Time Choice";
			t1 = space();
			create_component(route.$$.fragment);
		},
		m(target, anchor) {
			insert(target, h2, anchor);
			insert(target, t1, anchor);
			mount_component(route, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const route_changes = {};

			if (dirty & /*$$scope*/ 1) {
				route_changes.$$scope = { dirty, ctx };
			}

			route.$set(route_changes);
		},
		i(local) {
			if (current) return;
			transition_in(route.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(route.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(h2);
			if (detaching) detach(t1);
			destroy_component(route, detaching);
		}
	};
}

// (115:14) <Route path="/*">
function create_default_slot_4(ctx) {
	let h2;

	return {
		c() {
			h2 = element("h2");
			h2.textContent = "With Time Choice";
		},
		m(target, anchor) {
			insert(target, h2, anchor);
		},
		d(detaching) {
			if (detaching) detach(h2);
		}
	};
}

// (118:14) <Route path="/">
function create_default_slot_3(ctx) {
	let datepicker;
	let current;

	datepicker = new DatePicker({
			props: {
				format: "ddd, DD MMM YYYY HH:mm",
				range: true,
				time: true
			}
		});

	return {
		c() {
			create_component(datepicker.$$.fragment);
		},
		m(target, anchor) {
			mount_component(datepicker, target, anchor);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(datepicker.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(datepicker.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(datepicker, detaching);
		}
	};
}

// (121:14) <Route path="/with-selected-dates">
function create_default_slot_2(ctx) {
	let h3;
	let t1;
	let datepicker;
	let current;

	datepicker = new DatePicker({
			props: {
				format: "ddd, DD MMM YYYY HH:mm",
				selected: [
					dayjs("2020-04-20T16:15:33.000Z").toDate(),
					dayjs("2020-05-20T05:23:12.000Z").toDate()
				],
				range: true,
				time: true
			}
		});

	return {
		c() {
			h3 = element("h3");
			h3.textContent = "With Selected Dates";
			t1 = space();
			create_component(datepicker.$$.fragment);
		},
		m(target, anchor) {
			insert(target, h3, anchor);
			insert(target, t1, anchor);
			mount_component(datepicker, target, anchor);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(datepicker.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(datepicker.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(h3);
			if (detaching) detach(t1);
			destroy_component(datepicker, detaching);
		}
	};
}

// (114:12) <Route path="/with-time/*">
function create_default_slot_1(ctx) {
	let route0;
	let t0;
	let route1;
	let t1;
	let route2;
	let current;

	route0 = new Route({
			props: {
				path: "/*",
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			}
		});

	route1 = new Route({
			props: {
				path: "/",
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			}
		});

	route2 = new Route({
			props: {
				path: "/with-selected-dates",
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(route0.$$.fragment);
			t0 = space();
			create_component(route1.$$.fragment);
			t1 = space();
			create_component(route2.$$.fragment);
		},
		m(target, anchor) {
			mount_component(route0, target, anchor);
			insert(target, t0, anchor);
			mount_component(route1, target, anchor);
			insert(target, t1, anchor);
			mount_component(route2, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const route0_changes = {};

			if (dirty & /*$$scope*/ 1) {
				route0_changes.$$scope = { dirty, ctx };
			}

			route0.$set(route0_changes);
			const route1_changes = {};

			if (dirty & /*$$scope*/ 1) {
				route1_changes.$$scope = { dirty, ctx };
			}

			route1.$set(route1_changes);
			const route2_changes = {};

			if (dirty & /*$$scope*/ 1) {
				route2_changes.$$scope = { dirty, ctx };
			}

			route2.$set(route2_changes);
		},
		i(local) {
			if (current) return;
			transition_in(route0.$$.fragment, local);
			transition_in(route1.$$.fragment, local);
			transition_in(route2.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(route0.$$.fragment, local);
			transition_out(route1.$$.fragment, local);
			transition_out(route2.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(route0, detaching);
			if (detaching) detach(t0);
			destroy_component(route1, detaching);
			if (detaching) detach(t1);
			destroy_component(route2, detaching);
		}
	};
}

// (99:10) <Route path="/range-picker/*">
function create_default_slot(ctx) {
	let route0;
	let t0;
	let route1;
	let t1;
	let route2;
	let current;

	route0 = new Route({
			props: {
				path: "/*",
				$$slots: { default: [create_default_slot_7] },
				$$scope: { ctx }
			}
		});

	route1 = new Route({
			props: {
				path: "/without-time/*",
				$$slots: { default: [create_default_slot_5] },
				$$scope: { ctx }
			}
		});

	route2 = new Route({
			props: {
				path: "/with-time/*",
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(route0.$$.fragment);
			t0 = space();
			create_component(route1.$$.fragment);
			t1 = space();
			create_component(route2.$$.fragment);
		},
		m(target, anchor) {
			mount_component(route0, target, anchor);
			insert(target, t0, anchor);
			mount_component(route1, target, anchor);
			insert(target, t1, anchor);
			mount_component(route2, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const route0_changes = {};

			if (dirty & /*$$scope*/ 1) {
				route0_changes.$$scope = { dirty, ctx };
			}

			route0.$set(route0_changes);
			const route1_changes = {};

			if (dirty & /*$$scope*/ 1) {
				route1_changes.$$scope = { dirty, ctx };
			}

			route1.$set(route1_changes);
			const route2_changes = {};

			if (dirty & /*$$scope*/ 1) {
				route2_changes.$$scope = { dirty, ctx };
			}

			route2.$set(route2_changes);
		},
		i(local) {
			if (current) return;
			transition_in(route0.$$.fragment, local);
			transition_in(route1.$$.fragment, local);
			transition_in(route2.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(route0.$$.fragment, local);
			transition_out(route1.$$.fragment, local);
			transition_out(route2.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(route0, detaching);
			if (detaching) detach(t0);
			destroy_component(route1, detaching);
			if (detaching) detach(t1);
			destroy_component(route2, detaching);
		}
	};
}

function create_fragment(ctx) {
	let link;
	let t0;
	let header;
	let t6;
	let section;
	let div11;
	let div10;
	let div9;
	let aside;
	let t14;
	let div8;
	let route0;
	let t15;
	let route1;
	let t16;
	let route2;
	let t17;
	let div15;
	let t19;
	let footer;
	let current;

	route0 = new Route({
			props: {
				path: "/",
				$$slots: { default: [create_default_slot_16] },
				$$scope: { ctx }
			}
		});

	route1 = new Route({
			props: {
				path: "/date-picker/*",
				$$slots: { default: [create_default_slot_8] },
				$$scope: { ctx }
			}
		});

	route2 = new Route({
			props: {
				path: "/range-picker/*",
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			link = element("link");
			t0 = space();
			header = element("header");

			header.innerHTML = `<div class="container"><div class="row"><div class="col-lg-2 col-xs-12 left"><div id="logo" class="svelte-l439vz"><svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 263.2 127" style="enable-background:new 0 0 263.2 127;" xml:space="preserve" class="svelte-l439vz"><title>Beyonk-octothorpe</title><g id="Layer_2_1_"><g id="Layer_1-2"><path class="st0" d="M263.2,28.5v-5.9h-22.5V0h-5.9v22.5H28.5V0h-5.9v22.5H0v5.9h22.5v70.1H0v5.9h22.5V127h5.9v-22.5h206.4V127
                h5.9v-22.5h22.5v-5.9h-22.5V28.5H263.2z M234.8,98.5H28.5V28.5h206.4V98.5z M50.9,52.2h9.3c1.7-0.1,3.4,0.4,4.7,1.5
                c1.1,1.1,1.7,2.7,1.6,4.3c0,1-0.2,2-0.6,2.8c-0.4,0.8-1.1,1.4-1.9,1.9c0.7,0.1,1.5,0.4,2.1,0.7c0.6,0.3,1,0.7,1.4,1.2
                c0.4,0.5,0.6,1,0.8,1.6c0.2,0.6,0.2,1.3,0.2,1.9c0,1-0.2,1.9-0.6,2.8c-0.4,0.8-0.9,1.5-1.6,2.1c-0.7,0.6-1.5,1-2.4,1.2
                c-1.1,0.3-2.1,0.4-3.2,0.4H51L50.9,52.2z M56.8,61.1h1.7c1.8,0,2.8-0.7,2.8-2.2s-0.9-2.2-2.8-2.2h-1.7V61.1z M56.8,70.2h1.9
                c1.1,0.1,2.2-0.1,3.2-0.6c1-0.7,1.3-2.1,0.5-3.1c-0.1-0.2-0.3-0.4-0.5-0.5c-1-0.5-2.1-0.6-3.2-0.6h-1.9V70.2z M93,57.2h-9.9V61
                h9.6v5h-9.6v3.9H93v5H77.2V52.2H93V57.2z M108.2,65.7l-8.2-13.5h7l4.2,7.3l4.2-7.3h7L114,65.7v9h-5.8V65.7z M126,63.5
                c0-1.6,0.3-3.2,0.9-4.7c1.2-2.9,3.6-5.2,6.5-6.3c3.2-1.2,6.8-1.2,10.1,0c1.5,0.6,2.9,1.4,4,2.5c1.1,1.1,2,2.4,2.5,3.8
                c1.2,3,1.2,6.4,0,9.4c-0.6,1.4-1.5,2.7-2.6,3.8c-1.1,1.1-2.5,2-4,2.5c-3.2,1.2-6.8,1.2-10.1,0c-1.5-0.6-2.8-1.4-3.9-2.5
                c-1.1-1.1-2-2.4-2.6-3.8C126.3,66.7,126,65.1,126,63.5z M132.1,63.5c0,0.9,0.2,1.7,0.5,2.5c0.6,1.5,1.9,2.7,3.4,3.3
                c2.4,1,5.1,0.4,6.9-1.3c0.6-0.6,1.1-1.2,1.4-2c0.7-1.6,0.7-3.4,0-5c-0.3-0.8-0.8-1.4-1.4-2c-1.9-1.7-4.5-2.2-6.9-1.3
                c-1.5,0.6-2.7,1.8-3.4,3.4C132.3,61.8,132.1,62.6,132.1,63.5L132.1,63.5z M158.6,74.8V52.2h5.9L175.3,66V52.2h5.8v22.5h-5.8
                L164.5,61v13.8H158.6z M196.7,61.5l7.1-9.3h7.2l-8.9,10.7l9.8,11.9h-7.6l-7.6-9.8v9.8h-5.9V52.2h5.9V61.5z"></path></g></g></svg></div></div> 
			<div class="col-lg-8 col-md-7 col-xs-12"><div class="slogan">Svelte DatePicker Developer Documentation</div></div> 
			<div class="col-lg-2 col-md-3 col-xs-12 right"><a class="btn" href="http://www.github.com/beyonk-adventures/svelte-datepicker">Github</a></div></div></div>`;

			t6 = space();
			section = element("section");
			div11 = element("div");
			div10 = element("div");
			div9 = element("div");
			aside = element("aside");

			aside.innerHTML = `<div class="menu-box"><h4>Navigation</h4> 	
						<nav class="side-nav svelte-l439vz"><ul><li><a href="/" class="svelte-l439vz">Home</a></li> 
                <li><a href="/date-picker" class="svelte-l439vz">Date Picker</a></li> 
								<li><a href="/range-picker" class="svelte-l439vz">Range Picker</a></li></ul></nav></div>`;

			t14 = space();
			div8 = element("div");
			create_component(route0.$$.fragment);
			t15 = space();
			create_component(route1.$$.fragment);
			t16 = space();
			create_component(route2.$$.fragment);
			t17 = space();
			div15 = element("div");
			div15.innerHTML = `<div class="container"><div class="row"><div class="col-lg-12 center">Powered by Beyonk Open Source</div></div></div>`;
			t19 = space();
			footer = element("footer");
			footer.innerHTML = `<div class="container"><div class="row"><div class="col-lg-12 center"></div></div></div>`;
			attr(link, "href", "https://fonts.googleapis.com/css?family=Open+Sans:400,300,600,700⊂=latin,cyrillic");
			attr(link, "rel", "stylesheet");
			attr(link, "type", "text/css");
			attr(div8, "class", "content-info");
			attr(div9, "class", "row");
			attr(div10, "class", "content-wrap");
			attr(div11, "class", "container");
			attr(section, "class", "content");
			attr(div15, "class", "footer-area");
		},
		m(target, anchor) {
			append(document.head, link);
			insert(target, t0, anchor);
			insert(target, header, anchor);
			insert(target, t6, anchor);
			insert(target, section, anchor);
			append(section, div11);
			append(div11, div10);
			append(div10, div9);
			append(div9, aside);
			append(div9, t14);
			append(div9, div8);
			mount_component(route0, div8, null);
			append(div8, t15);
			mount_component(route1, div8, null);
			append(div8, t16);
			mount_component(route2, div8, null);
			insert(target, t17, anchor);
			insert(target, div15, anchor);
			insert(target, t19, anchor);
			insert(target, footer, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const route0_changes = {};

			if (dirty & /*$$scope*/ 1) {
				route0_changes.$$scope = { dirty, ctx };
			}

			route0.$set(route0_changes);
			const route1_changes = {};

			if (dirty & /*$$scope*/ 1) {
				route1_changes.$$scope = { dirty, ctx };
			}

			route1.$set(route1_changes);
			const route2_changes = {};

			if (dirty & /*$$scope*/ 1) {
				route2_changes.$$scope = { dirty, ctx };
			}

			route2.$set(route2_changes);
		},
		i(local) {
			if (current) return;
			transition_in(route0.$$.fragment, local);
			transition_in(route1.$$.fragment, local);
			transition_in(route2.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(route0.$$.fragment, local);
			transition_out(route1.$$.fragment, local);
			transition_out(route2.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			detach(link);
			if (detaching) detach(t0);
			if (detaching) detach(header);
			if (detaching) detach(t6);
			if (detaching) detach(section);
			destroy_component(route0);
			destroy_component(route1);
			destroy_component(route2);
			if (detaching) detach(t17);
			if (detaching) detach(div15);
			if (detaching) detach(t19);
			if (detaching) detach(footer);
		}
	};
}

class App extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, null, create_fragment, safe_not_equal, {});
	}
}

export default App;