import './View.css.proxy.js';
/* src/components/view/View.svelte generated by Svelte v3.30.0 */
import {
	SvelteComponent,
	attr,
	bubble,
	check_outros,
	component_subscribe,
	create_component,
	destroy_component,
	detach,
	element,
	group_outros,
	init,
	insert,
	mount_component,
	safe_not_equal,
	toggle_class,
	transition_in,
	transition_out
} from "../../../web_modules/svelte/internal.js";

import { contextKey } from "../lib/context.js";
import { getContext, onMount, createEventDispatcher } from "../../../web_modules/svelte.js";
import DateView from "./date-view/DateView.js";
import TimeView from "./time-view/TimeView.js";

function create_fragment(ctx) {
	let div;
	let switch_instance;
	let current;
	var switch_value = /*component*/ ctx[1];

	function switch_props(ctx) {
		return {
			props: {
				viewContextKey: /*viewContextKey*/ ctx[0]
			}
		};
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props(ctx));
		switch_instance.$on("date-chosen", /*date_chosen_handler*/ ctx[5]);
		switch_instance.$on("time-chosen", /*time_chosen_handler*/ ctx[6]);
	}

	return {
		c() {
			div = element("div");
			if (switch_instance) create_component(switch_instance.$$.fragment);
			attr(div, "class", "calendar svelte-uuk0y6");
			toggle_class(div, "is-range-picker", /*config*/ ctx[3].isRangePicker);
			toggle_class(div, "day", /*$isDaytime*/ ctx[2]);
			toggle_class(div, "night", !/*$isDaytime*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (switch_instance) {
				mount_component(switch_instance, div, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			const switch_instance_changes = {};
			if (dirty & /*viewContextKey*/ 1) switch_instance_changes.viewContextKey = /*viewContextKey*/ ctx[0];

			if (switch_value !== (switch_value = /*component*/ ctx[1])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props(ctx));
					switch_instance.$on("date-chosen", /*date_chosen_handler*/ ctx[5]);
					switch_instance.$on("time-chosen", /*time_chosen_handler*/ ctx[6]);
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, div, null);
				} else {
					switch_instance = null;
				}
			} else if (switch_value) {
				switch_instance.$set(switch_instance_changes);
			}

			if (dirty & /*config*/ 8) {
				toggle_class(div, "is-range-picker", /*config*/ ctx[3].isRangePicker);
			}

			if (dirty & /*$isDaytime*/ 4) {
				toggle_class(div, "day", /*$isDaytime*/ ctx[2]);
			}

			if (dirty & /*$isDaytime*/ 4) {
				toggle_class(div, "night", !/*$isDaytime*/ ctx[2]);
			}
		},
		i(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (switch_instance) destroy_component(switch_instance);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $isDaytime;
	let { viewContextKey } = $$props;
	const dispatch = createEventDispatcher();
	const { config, choices } = getContext(contextKey);
	const { isDaytime } = getContext(viewContextKey);
	component_subscribe($$self, isDaytime, value => $$invalidate(2, $isDaytime = value));
	let component = DateView;

	onMount(() => {
		return choices.subscribe(({ allDatesChosen, allTimesChosen }) => {
			if (!allDatesChosen) {
				$$invalidate(1, component = DateView);
			} else if (allDatesChosen && !allTimesChosen) {
				$$invalidate(1, component = TimeView);
			} else if (allDatesChosen && allTimesChosen) {
				dispatch("close");
			}
		});
	});

	function date_chosen_handler(event) {
		bubble($$self, event);
	}

	function time_chosen_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$props => {
		if ("viewContextKey" in $$props) $$invalidate(0, viewContextKey = $$props.viewContextKey);
	};

	return [
		viewContextKey,
		component,
		$isDaytime,
		config,
		isDaytime,
		date_chosen_handler,
		time_chosen_handler
	];
}

class View extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { viewContextKey: 0 });
	}
}

export default View;