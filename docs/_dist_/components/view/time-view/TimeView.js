import './TimeView.css.proxy.js';
/* src/components/view/time-view/TimeView.svelte generated by Svelte v3.30.0 */
import {
	SvelteComponent,
	append,
	attr,
	component_subscribe,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert,
	listen,
	mount_component,
	noop,
	safe_not_equal,
	set_data,
	space,
	text,
	toggle_class,
	transition_in,
	transition_out
} from "../../../../web_modules/svelte/internal.js";

import dayjs from "../../../../web_modules/dayjs/esm.js";
import { contextKey } from "../../lib/context.js";
import TimeInput from "./TimeInput.js";
import { getContext, createEventDispatcher } from "../../../../web_modules/svelte.js";

function create_if_block(ctx) {
	let button;
	let mounted;
	let dispose;

	return {
		c() {
			button = element("button");
			button.textContent = "confirm";
			attr(button, "class", "button svelte-rhdfo1");
		},
		m(target, anchor) {
			insert(target, button, anchor);

			if (!mounted) {
				dispose = listen(button, "click", /*click_handler*/ ctx[8]);
				mounted = true;
			}
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(button);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let div1;
	let span;
	let t0_value = dayjs(/*$date*/ ctx[2]).format(/*config*/ ctx[7].format) + "";
	let t0;
	let t1;
	let timeinput;
	let t2;
	let div0;
	let current;

	timeinput = new TimeInput({
			props: {
				viewContextKey: /*viewContextKey*/ ctx[0]
			}
		});

	let if_block = !(/*config*/ ctx[7].isRangePicker && /*isStart*/ ctx[5]) && create_if_block(ctx);

	return {
		c() {
			div1 = element("div");
			span = element("span");
			t0 = text(t0_value);
			t1 = space();
			create_component(timeinput.$$.fragment);
			t2 = space();
			div0 = element("div");
			if (if_block) if_block.c();
			attr(span, "class", "chosen-date svelte-rhdfo1");
			attr(div0, "class", "cta svelte-rhdfo1");
			attr(div1, "class", "time-container svelte-rhdfo1");
			toggle_class(div1, "is-night", !/*$isDaytime*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, span);
			append(span, t0);
			append(div1, t1);
			mount_component(timeinput, div1, null);
			append(div1, t2);
			append(div1, div0);
			if (if_block) if_block.m(div0, null);
			current = true;
		},
		p(ctx, [dirty]) {
			if ((!current || dirty & /*$date*/ 4) && t0_value !== (t0_value = dayjs(/*$date*/ ctx[2]).format(/*config*/ ctx[7].format) + "")) set_data(t0, t0_value);
			const timeinput_changes = {};
			if (dirty & /*viewContextKey*/ 1) timeinput_changes.viewContextKey = /*viewContextKey*/ ctx[0];
			timeinput.$set(timeinput_changes);
			if (!(/*config*/ ctx[7].isRangePicker && /*isStart*/ ctx[5])) if_block.p(ctx, dirty);

			if (dirty & /*$isDaytime*/ 2) {
				toggle_class(div1, "is-night", !/*$isDaytime*/ ctx[1]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(timeinput.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(timeinput.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			destroy_component(timeinput);
			if (if_block) if_block.d();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $isDaytime;
	let $date;
	const dispatch = createEventDispatcher();
	let { viewContextKey } = $$props;
	const { date, isStart, isDaytime } = getContext(viewContextKey);
	component_subscribe($$self, date, value => $$invalidate(2, $date = value));
	component_subscribe($$self, isDaytime, value => $$invalidate(1, $isDaytime = value));
	const { config } = getContext(contextKey);
	const click_handler = () => dispatch("time-chosen");

	$$self.$$set = $$props => {
		if ("viewContextKey" in $$props) $$invalidate(0, viewContextKey = $$props.viewContextKey);
	};

	return [
		viewContextKey,
		$isDaytime,
		$date,
		dispatch,
		date,
		isStart,
		isDaytime,
		config,
		click_handler
	];
}

class TimeView extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { viewContextKey: 0 });
	}
}

export default TimeView;