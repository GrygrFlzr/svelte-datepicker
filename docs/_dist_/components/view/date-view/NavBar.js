import './NavBar.css.proxy.js';
/* src/components/view/date-view/NavBar.svelte generated by Svelte v3.30.0 */
import {
	SvelteComponent,
	append,
	attr,
	component_subscribe,
	destroy_each,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	run_all,
	safe_not_equal,
	set_data,
	space,
	text,
	toggle_class
} from "../../../../web_modules/svelte/internal.js";

import { getContext } from "../../../../web_modules/svelte.js";
import { contextKey } from "../../lib/context.js";
import { monthsOfYear } from "../../lib/time.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[21] = list[i];
	child_ctx[23] = i;
	return child_ctx;
}

// (101:6) {#each availableMonths as monthDefinition, index}
function create_each_block(ctx) {
	let div;
	let span;
	let t0_value = /*monthDefinition*/ ctx[21].abbrev + "";
	let t0;
	let t1;
	let mounted;
	let dispose;

	function click_handler_2(...args) {
		return /*click_handler_2*/ ctx[16](/*index*/ ctx[23], ...args);
	}

	return {
		c() {
			div = element("div");
			span = element("span");
			t0 = text(t0_value);
			t1 = space();
			attr(span, "class", "svelte-rz06z1");
			attr(div, "class", "month-selector--month svelte-rz06z1");
			toggle_class(div, "selected", /*index*/ ctx[23] === /*$month*/ ctx[5]);
			toggle_class(div, "selectable", /*monthDefinition*/ ctx[21].selectable);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, span);
			append(span, t0);
			append(div, t1);

			if (!mounted) {
				dispose = listen(div, "click", click_handler_2);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*availableMonths*/ 4 && t0_value !== (t0_value = /*monthDefinition*/ ctx[21].abbrev + "")) set_data(t0, t0_value);

			if (dirty & /*$month*/ 32) {
				toggle_class(div, "selected", /*index*/ ctx[23] === /*$month*/ ctx[5]);
			}

			if (dirty & /*availableMonths*/ 4) {
				toggle_class(div, "selectable", /*monthDefinition*/ ctx[21].selectable);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let div5;
	let div3;
	let div0;
	let t0;
	let div1;
	let span;
	let t1_value = monthsOfYear[/*$month*/ ctx[5]][0] + "";
	let t1;
	let t2;
	let t3;
	let t4;
	let div2;
	let t5;
	let div4;
	let mounted;
	let dispose;
	let each_value = /*availableMonths*/ ctx[2];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			div5 = element("div");
			div3 = element("div");
			div0 = element("div");
			div0.innerHTML = `<i class="arrow left svelte-rz06z1"></i>`;
			t0 = space();
			div1 = element("div");
			span = element("span");
			t1 = text(t1_value);
			t2 = space();
			t3 = text(/*$year*/ ctx[0]);
			t4 = space();
			div2 = element("div");
			div2.innerHTML = `<i class="arrow right svelte-rz06z1"></i>`;
			t5 = space();
			div4 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(div0, "class", "control svelte-rz06z1");
			toggle_class(div0, "enabled", /*canDecrementMonth*/ ctx[4]);
			attr(div1, "class", "label svelte-rz06z1");
			attr(div2, "class", "control svelte-rz06z1");
			toggle_class(div2, "enabled", /*canIncrementMonth*/ ctx[3]);
			attr(div3, "class", "heading-section svelte-rz06z1");
			attr(div4, "class", "month-selector svelte-rz06z1");
			toggle_class(div4, "open", /*monthSelectorOpen*/ ctx[1]);
			attr(div5, "class", "title svelte-rz06z1");
		},
		m(target, anchor) {
			insert(target, div5, anchor);
			append(div5, div3);
			append(div3, div0);
			append(div3, t0);
			append(div3, div1);
			append(div1, span);
			append(span, t1);
			append(span, t2);
			append(span, t3);
			append(div3, t4);
			append(div3, div2);
			append(div5, t5);
			append(div5, div4);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div4, null);
			}

			if (!mounted) {
				dispose = [
					listen(div0, "click", /*click_handler*/ ctx[14]),
					listen(div1, "click", /*toggleMonthSelectorOpen*/ ctx[10]),
					listen(div2, "click", /*click_handler_1*/ ctx[15])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*canDecrementMonth*/ 16) {
				toggle_class(div0, "enabled", /*canDecrementMonth*/ ctx[4]);
			}

			if (dirty & /*$month*/ 32 && t1_value !== (t1_value = monthsOfYear[/*$month*/ ctx[5]][0] + "")) set_data(t1, t1_value);
			if (dirty & /*$year*/ 1) set_data(t3, /*$year*/ ctx[0]);

			if (dirty & /*canIncrementMonth*/ 8) {
				toggle_class(div2, "enabled", /*canIncrementMonth*/ ctx[3]);
			}

			if (dirty & /*$month, availableMonths, monthSelected*/ 2084) {
				each_value = /*availableMonths*/ ctx[2];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div4, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (dirty & /*monthSelectorOpen*/ 2) {
				toggle_class(div4, "open", /*monthSelectorOpen*/ ctx[1]);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div5);
			destroy_each(each_blocks, detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $year;
	let $monthView;
	let $month;
	let { viewContextKey } = $$props;
	const { months, config, highlighted } = getContext(contextKey);
	const { year, month, monthView } = getContext(viewContextKey);
	component_subscribe($$self, year, value => $$invalidate(0, $year = value));
	component_subscribe($$self, month, value => $$invalidate(5, $month = value));
	component_subscribe($$self, monthView, value => $$invalidate(13, $monthView = value));
	let monthSelectorOpen = false;
	let availableMonths;

	function changeMonth(selectedMonth) {
		month.set(selectedMonth);
		highlighted.set(new Date($year, $month, 1));
	}

	function incrementMonth(direction, day = 1) {
		if (direction === 1 && !canIncrementMonth) return;
		if (direction === -1 && !canDecrementMonth) return;
		const current = new Date($year, $month, 1);
		current.setMonth(current.getMonth() + direction);
		month.set(current.getMonth());
		year.set(current.getFullYear());
		highlighted.set(new Date($year, $month, day));
	}

	// function incrementDayHighlighted (amount) {
	//   const proposedDate = new Date($highlighted)
	//   proposedDate.setDate($highlighted.getDate() + amount)
	//   const correspondingDayObj = getDay(
	//     months,
	//     proposedDate.getMonth(),
	//     proposedDate.getDate(),
	//     proposedDate.getFullYear()
	//   )
	//   if (!correspondingDayObj || !correspondingDayObj.isInRange) { return }
	//   highlighted.set(proposedDate)
	//   if (amount > 0 && $highlighted > lastVisibleDate) {
	//     incrementMonth(1, $highlighted.getDate())
	//   }
	//   if (amount < 0 && $highlighted < firstVisibleDate) {
	//     incrementMonth(-1, $highlighted.getDate())
	//   }
	// }
	function toggleMonthSelectorOpen() {
		$$invalidate(1, monthSelectorOpen = !monthSelectorOpen);
	}

	function monthSelected(event, { monthDefinition, index }) {
		event.stopPropagation();
		if (!monthDefinition.selectable) return;
		changeMonth(index);
		toggleMonthSelectorOpen();
	}

	const click_handler = () => incrementMonth(-1);
	const click_handler_1 = () => incrementMonth(1);
	const click_handler_2 = (index, e) => monthSelected(e, index);

	$$self.$$set = $$props => {
		if ("viewContextKey" in $$props) $$invalidate(12, viewContextKey = $$props.viewContextKey);
	};

	let canIncrementMonth;
	let canDecrementMonth;

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$year*/ 1) {
			$: {
				const isOnLowerBoundary = config.start.getFullYear() === $year;
				const isOnUpperBoundary = config.end.getFullYear() === $year;

				$$invalidate(2, availableMonths = monthsOfYear.map((m, i) => {
					return Object.assign({}, { name: m[0], abbrev: m[1] }, {
						selectable: !isOnLowerBoundary && !isOnUpperBoundary || (!isOnLowerBoundary || i >= config.start.getMonth()) && (!isOnUpperBoundary || i <= config.end.getMonth())
					});
				}));
			}
		}

		if ($$self.$$.dirty & /*$monthView*/ 8192) {
			// $: lastVisibleDate = $monthView.visibleMonth.weeks[$monthView.visibleMonth.weeks.length - 1].days[6].date
			// $: firstVisibleDate = $monthView.visibleMonth.weeks[0].days[0].date
			$: $$invalidate(3, canIncrementMonth = $monthView.monthIndex < months.length - 1);
		}

		if ($$self.$$.dirty & /*$monthView*/ 8192) {
			$: $$invalidate(4, canDecrementMonth = $monthView.monthIndex > 0);
		}
	};

	return [
		$year,
		monthSelectorOpen,
		availableMonths,
		canIncrementMonth,
		canDecrementMonth,
		$month,
		year,
		month,
		monthView,
		incrementMonth,
		toggleMonthSelectorOpen,
		monthSelected,
		viewContextKey,
		$monthView,
		click_handler,
		click_handler_1,
		click_handler_2
	];
}

class NavBar extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { viewContextKey: 12 });
	}
}

export default NavBar;