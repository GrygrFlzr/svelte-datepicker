import './Month.css.proxy.js';
/* src/components/view/date-view/Month.svelte generated by Svelte v3.30.0 */
import {
	SvelteComponent,
	append,
	attr,
	bubble,
	check_outros,
	component_subscribe,
	create_component,
	destroy_component,
	destroy_each,
	detach,
	element,
	empty,
	group_outros,
	init,
	insert,
	mount_component,
	noop,
	outro_and_destroy_block,
	safe_not_equal,
	space,
	text,
	transition_in,
	transition_out,
	update_keyed_each
} from "../../../../web_modules/svelte/internal.js";

import Week from "./Week.js";
import { getContext } from "../../../../web_modules/svelte.js";
import { sortedDaysOfWeek } from "../../lib/time.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[7] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[10] = list[i];
	return child_ctx;
}

// (24:8) {#each sortedDaysOfWeek as day}
function create_each_block_1(ctx) {
	let span;
	let t_value = /*day*/ ctx[10][1] + "";
	let t;

	return {
		c() {
			span = element("span");
			t = text(t_value);
			attr(span, "class", "svelte-1a4pezh");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			append(span, t);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

// (29:4) {#each $monthView.visibleMonth.weeks as week (week.id)}
function create_each_block(key_1, ctx) {
	let first;
	let week;
	let current;

	week = new Week({
			props: {
				viewContextKey: /*viewContextKey*/ ctx[0],
				days: /*week*/ ctx[7].days,
				direction: /*direction*/ ctx[1]
			}
		});

	week.$on("chosen", /*chosen_handler*/ ctx[6]);

	return {
		key: key_1,
		first: null,
		c() {
			first = empty();
			create_component(week.$$.fragment);
			this.first = first;
		},
		m(target, anchor) {
			insert(target, first, anchor);
			mount_component(week, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const week_changes = {};
			if (dirty & /*viewContextKey*/ 1) week_changes.viewContextKey = /*viewContextKey*/ ctx[0];
			if (dirty & /*$monthView*/ 4) week_changes.days = /*week*/ ctx[7].days;
			if (dirty & /*direction*/ 2) week_changes.direction = /*direction*/ ctx[1];
			week.$set(week_changes);
		},
		i(local) {
			if (current) return;
			transition_in(week.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(week.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(first);
			destroy_component(week, detaching);
		}
	};
}

function create_fragment(ctx) {
	let div3;
	let div2;
	let div1;
	let div0;
	let t;
	let each_blocks = [];
	let each1_lookup = new Map();
	let current;
	let each_value_1 = sortedDaysOfWeek;
	let each_blocks_1 = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks_1[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	let each_value = /*$monthView*/ ctx[2].visibleMonth.weeks;
	const get_key = ctx => /*week*/ ctx[7].id;

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context(ctx, each_value, i);
		let key = get_key(child_ctx);
		each1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
	}

	return {
		c() {
			div3 = element("div");
			div2 = element("div");
			div1 = element("div");
			div0 = element("div");

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(div0, "class", "month-week svelte-1a4pezh");
			attr(div1, "class", "legend svelte-1a4pezh");
			attr(div2, "class", "month-dates svelte-1a4pezh");
			attr(div3, "class", "month-container svelte-1a4pezh");
		},
		m(target, anchor) {
			insert(target, div3, anchor);
			append(div3, div2);
			append(div2, div1);
			append(div1, div0);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(div0, null);
			}

			append(div2, t);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div2, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (dirty & /*sortedDaysOfWeek*/ 0) {
				each_value_1 = sortedDaysOfWeek;
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks_1[i]) {
						each_blocks_1[i].p(child_ctx, dirty);
					} else {
						each_blocks_1[i] = create_each_block_1(child_ctx);
						each_blocks_1[i].c();
						each_blocks_1[i].m(div0, null);
					}
				}

				for (; i < each_blocks_1.length; i += 1) {
					each_blocks_1[i].d(1);
				}

				each_blocks_1.length = each_value_1.length;
			}

			if (dirty & /*viewContextKey, $monthView, direction*/ 7) {
				const each_value = /*$monthView*/ ctx[2].visibleMonth.weeks;
				group_outros();
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each1_lookup, div2, outro_and_destroy_block, create_each_block, null, get_each_context);
				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(div3);
			destroy_each(each_blocks_1, detaching);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d();
			}
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $monthView;
	let { viewContextKey } = $$props;
	let { id } = $$props;
	const { monthView } = getContext(viewContextKey);
	component_subscribe($$self, monthView, value => $$invalidate(2, $monthView = value));
	let lastId = id;
	let direction;

	function chosen_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$props => {
		if ("viewContextKey" in $$props) $$invalidate(0, viewContextKey = $$props.viewContextKey);
		if ("id" in $$props) $$invalidate(4, id = $$props.id);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*lastId, id*/ 48) {
			$: {
				$$invalidate(1, direction = lastId < id ? 1 : -1);
				$$invalidate(5, lastId = id);
			}
		}
	};

	return [viewContextKey, direction, $monthView, monthView, id, lastId, chosen_handler];
}

class Month extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { viewContextKey: 0, id: 4 });
	}
}

export default Month;