import './DateView.css.proxy.js';
/* src/components/view/date-view/DateView.svelte generated by Svelte v3.30.0 */
import {
	SvelteComponent,
	append,
	attr,
	component_subscribe,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert,
	mount_component,
	safe_not_equal,
	space,
	transition_in,
	transition_out
} from "../../../../web_modules/svelte/internal.js";

import Month from "./Month.js";
import NavBar from "./NavBar.js";
import { checkIfVisibleDateIsSelectable, shakeDate } from "./feedback.js";
import { contextKey } from "../../lib/context.js";

// import { createKeyboardHandler } from './keyboard.js'
import { getContext, createEventDispatcher } from "../../../../web_modules/svelte.js";

function create_fragment(ctx) {
	let div;
	let navbar;
	let t;
	let month_1;
	let current;

	navbar = new NavBar({
			props: {
				viewContextKey: /*viewContextKey*/ ctx[0]
			}
		});

	month_1 = new Month({
			props: {
				viewContextKey: /*viewContextKey*/ ctx[0],
				id: /*visibleMonthsId*/ ctx[1]
			}
		});

	month_1.$on("chosen", /*chosen_handler*/ ctx[7]);

	return {
		c() {
			div = element("div");
			create_component(navbar.$$.fragment);
			t = space();
			create_component(month_1.$$.fragment);
			attr(div, "class", "svelte-3fib5n");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(navbar, div, null);
			append(div, t);
			mount_component(month_1, div, null);
			current = true;
		},
		p(ctx, [dirty]) {
			const navbar_changes = {};
			if (dirty & /*viewContextKey*/ 1) navbar_changes.viewContextKey = /*viewContextKey*/ ctx[0];
			navbar.$set(navbar_changes);
			const month_1_changes = {};
			if (dirty & /*viewContextKey*/ 1) month_1_changes.viewContextKey = /*viewContextKey*/ ctx[0];
			if (dirty & /*visibleMonthsId*/ 2) month_1_changes.id = /*visibleMonthsId*/ ctx[1];
			month_1.$set(month_1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(navbar.$$.fragment, local);
			transition_in(month_1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(navbar.$$.fragment, local);
			transition_out(month_1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(navbar);
			destroy_component(month_1);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $year;
	let $month;
	let { viewContextKey } = $$props;
	const { date, year, month } = getContext(viewContextKey);
	component_subscribe($$self, year, value => $$invalidate(5, $year = value));
	component_subscribe($$self, month, value => $$invalidate(6, $month = value));
	const { months, shouldShakeDate } = getContext(contextKey);
	const dispatch = createEventDispatcher();

	function registerSelection(chosen) {
		if (!checkIfVisibleDateIsSelectable(months, chosen)) {
			return shakeDate(shouldShakeDate, chosen);
		}

		date.set(chosen);
		dispatch("date-chosen");
		return true;
	}

	const chosen_handler = e => registerSelection(e.detail.date);

	$$self.$$set = $$props => {
		if ("viewContextKey" in $$props) $$invalidate(0, viewContextKey = $$props.viewContextKey);
	};

	let visibleMonthsId;

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$year, $month*/ 96) {
			// const keyboardHandler = createKeyboardHandler({
			//   incrementDayHighlighted,
			//   incrementMonth,
			//   registerSelection: () => registerSelection($highlighted),
			//   close: () => dispatch('close')
			// })
			// onMount(() => {
			//   document.addEventListener('keydown', keyboardHandler)
			//   return () => {
			//     document.removeEventListener('keydown', keyboardHandler)
			//   }
			// })
			$: $$invalidate(1, visibleMonthsId = $year + $month / 100);
		}
	};

	return [
		viewContextKey,
		visibleMonthsId,
		year,
		month,
		registerSelection,
		$year,
		$month,
		chosen_handler
	];
}

class DateView extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { viewContextKey: 0 });
	}
}

export default DateView;