import './Week.css.proxy.js';
/* src/components/view/date-view/Week.svelte generated by Svelte v3.30.0 */
import {
	SvelteComponent,
	add_render_callback,
	append,
	attr,
	component_subscribe,
	create_in_transition,
	destroy_each,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	safe_not_equal,
	set_data,
	space,
	stop_propagation,
	text,
	toggle_class
} from "../../../../web_modules/svelte/internal.js";

import { areDatesEquivalent, isDateBetweenSelected } from "./date-comparison.js";
import { fly } from "../../../../web_modules/svelte/transition.js";
import { createEventDispatcher, getContext } from "../../../../web_modules/svelte.js";
import { contextKey } from "../../lib/context.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[19] = list[i];
	return child_ctx;
}

// (21:2) {#each days as day}
function create_each_block(ctx) {
	let div;
	let button;
	let t0_value = /*day*/ ctx[19].date.getDate() + "";
	let t0;
	let t1;
	let mounted;
	let dispose;

	function click_handler() {
		return /*click_handler*/ ctx[18](/*day*/ ctx[19]);
	}

	return {
		c() {
			div = element("div");
			button = element("button");
			t0 = text(t0_value);
			t1 = space();
			attr(button, "class", "day--label svelte-1udcvy0");
			attr(button, "type", "button");
			toggle_class(button, "highlighted", areDatesEquivalent(/*day*/ ctx[19].date, /*$highlighted*/ ctx[6]));
			toggle_class(button, "shake-date", /*$shouldShakeDate*/ ctx[7] && areDatesEquivalent(/*day*/ ctx[19].date, /*$shouldShakeDate*/ ctx[7]));
			toggle_class(button, "disabled", !/*day*/ ctx[19].selectable);
			attr(div, "class", "day svelte-1udcvy0");
			toggle_class(div, "is-night", !/*$isDaytime*/ ctx[2]);
			toggle_class(div, "is-range-picker", /*config*/ ctx[8].isRangePicker);
			toggle_class(div, "outside-month", !/*day*/ ctx[19].partOfMonth);
			toggle_class(div, "first-of-month", /*day*/ ctx[19].firstOfMonth);
			toggle_class(div, "last-of-month", /*day*/ ctx[19].lastOfMonth);
			toggle_class(div, "selection-start", /*isStart*/ ctx[13] && areDatesEquivalent(/*day*/ ctx[19].date, /*$date*/ ctx[3]));
			toggle_class(div, "selection-end", /*config*/ ctx[8].isRangePicker && !/*isStart*/ ctx[13] && areDatesEquivalent(/*day*/ ctx[19].date, /*$date*/ ctx[3]));
			toggle_class(div, "part-of-range", /*config*/ ctx[8].isRangePicker && (/*isStart*/ ctx[13] && isDateBetweenSelected(/*$date*/ ctx[3], /*$selectedEndDate*/ ctx[4], /*day*/ ctx[19].date) || !/*isStart*/ ctx[13] && isDateBetweenSelected(/*$selectedStartDate*/ ctx[5], /*$date*/ ctx[3], /*day*/ ctx[19].date)));
			toggle_class(div, "is-today", /*day*/ ctx[19].isToday);
			toggle_class(div, "is-disabled", !/*day*/ ctx[19].selectable);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, button);
			append(button, t0);
			append(div, t1);

			if (!mounted) {
				dispose = listen(button, "click", stop_propagation(click_handler));
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*days*/ 1 && t0_value !== (t0_value = /*day*/ ctx[19].date.getDate() + "")) set_data(t0, t0_value);

			if (dirty & /*areDatesEquivalent, days, $highlighted*/ 65) {
				toggle_class(button, "highlighted", areDatesEquivalent(/*day*/ ctx[19].date, /*$highlighted*/ ctx[6]));
			}

			if (dirty & /*$shouldShakeDate, areDatesEquivalent, days*/ 129) {
				toggle_class(button, "shake-date", /*$shouldShakeDate*/ ctx[7] && areDatesEquivalent(/*day*/ ctx[19].date, /*$shouldShakeDate*/ ctx[7]));
			}

			if (dirty & /*days*/ 1) {
				toggle_class(button, "disabled", !/*day*/ ctx[19].selectable);
			}

			if (dirty & /*$isDaytime*/ 4) {
				toggle_class(div, "is-night", !/*$isDaytime*/ ctx[2]);
			}

			if (dirty & /*config*/ 256) {
				toggle_class(div, "is-range-picker", /*config*/ ctx[8].isRangePicker);
			}

			if (dirty & /*days*/ 1) {
				toggle_class(div, "outside-month", !/*day*/ ctx[19].partOfMonth);
			}

			if (dirty & /*days*/ 1) {
				toggle_class(div, "first-of-month", /*day*/ ctx[19].firstOfMonth);
			}

			if (dirty & /*days*/ 1) {
				toggle_class(div, "last-of-month", /*day*/ ctx[19].lastOfMonth);
			}

			if (dirty & /*isStart, areDatesEquivalent, days, $date*/ 8201) {
				toggle_class(div, "selection-start", /*isStart*/ ctx[13] && areDatesEquivalent(/*day*/ ctx[19].date, /*$date*/ ctx[3]));
			}

			if (dirty & /*config, isStart, areDatesEquivalent, days, $date*/ 8457) {
				toggle_class(div, "selection-end", /*config*/ ctx[8].isRangePicker && !/*isStart*/ ctx[13] && areDatesEquivalent(/*day*/ ctx[19].date, /*$date*/ ctx[3]));
			}

			if (dirty & /*config, isStart, isDateBetweenSelected, $date, $selectedEndDate, days, $selectedStartDate*/ 8505) {
				toggle_class(div, "part-of-range", /*config*/ ctx[8].isRangePicker && (/*isStart*/ ctx[13] && isDateBetweenSelected(/*$date*/ ctx[3], /*$selectedEndDate*/ ctx[4], /*day*/ ctx[19].date) || !/*isStart*/ ctx[13] && isDateBetweenSelected(/*$selectedStartDate*/ ctx[5], /*$date*/ ctx[3], /*day*/ ctx[19].date)));
			}

			if (dirty & /*days*/ 1) {
				toggle_class(div, "is-today", /*day*/ ctx[19].isToday);
			}

			if (dirty & /*days*/ 1) {
				toggle_class(div, "is-disabled", !/*day*/ ctx[19].selectable);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let div;
	let div_intro;
	let each_value = /*days*/ ctx[0];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(div, "class", "week svelte-1udcvy0");
		},
		m(target, anchor) {
			insert(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}
		},
		p(new_ctx, [dirty]) {
			ctx = new_ctx;

			if (dirty & /*$isDaytime, config, days, isStart, areDatesEquivalent, $date, isDateBetweenSelected, $selectedEndDate, $selectedStartDate, $highlighted, $shouldShakeDate, dispatch*/ 74237) {
				each_value = /*days*/ ctx[0];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i(local) {
			if (local) {
				if (!div_intro) {
					add_render_callback(() => {
						div_intro = create_in_transition(div, fly, {
							x: /*direction*/ ctx[1] * 50,
							duration: 180,
							delay: 90
						});

						div_intro.start();
					});
				}
			}
		},
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $isDaytime;
	let $date;
	let $selectedEndDate;
	let $selectedStartDate;
	let $highlighted;
	let $shouldShakeDate;
	let { viewContextKey } = $$props;
	let { days } = $$props;
	let { direction } = $$props;
	const { config, shouldShakeDate, highlighted, selectedStartDate, selectedEndDate } = getContext(contextKey);
	component_subscribe($$self, shouldShakeDate, value => $$invalidate(7, $shouldShakeDate = value));
	component_subscribe($$self, highlighted, value => $$invalidate(6, $highlighted = value));
	component_subscribe($$self, selectedStartDate, value => $$invalidate(5, $selectedStartDate = value));
	component_subscribe($$self, selectedEndDate, value => $$invalidate(4, $selectedEndDate = value));
	const { isStart, date, isDaytime } = getContext(viewContextKey);
	component_subscribe($$self, date, value => $$invalidate(3, $date = value));
	component_subscribe($$self, isDaytime, value => $$invalidate(2, $isDaytime = value));
	const dispatch = createEventDispatcher();
	const click_handler = day => dispatch("chosen", { date: day.date });

	$$self.$$set = $$props => {
		if ("viewContextKey" in $$props) $$invalidate(17, viewContextKey = $$props.viewContextKey);
		if ("days" in $$props) $$invalidate(0, days = $$props.days);
		if ("direction" in $$props) $$invalidate(1, direction = $$props.direction);
	};

	return [
		days,
		direction,
		$isDaytime,
		$date,
		$selectedEndDate,
		$selectedStartDate,
		$highlighted,
		$shouldShakeDate,
		config,
		shouldShakeDate,
		highlighted,
		selectedStartDate,
		selectedEndDate,
		isStart,
		date,
		isDaytime,
		dispatch,
		viewContextKey,
		click_handler
	];
}

class Week extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			viewContextKey: 17,
			days: 0,
			direction: 1
		});
	}
}

export default Week;